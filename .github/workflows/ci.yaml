name: CI - Lint, Test, Sonar, Build, Scan
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: true


      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache-dependency-path: requirements.txt
        

      - name: Create virtual environment
        run: |
            python -m venv venv
            source venv/bin/activate
            echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
            echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pylint

      - name: Run pylint & enforce score
        run: |
            chmod +x scripts/check_pylint_score.sh
            ./scripts/check_pylint_score.sh 8.0

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          echo "Running unit tests..."
          python -m pytest test_app.py -v --tb=short
          echo "‚úÖ All tests passed!"

  sonar:
    name: SonarQube Analysis
    runs-on: self-hosted
    needs: test
    env:
      SONAR_PROJECT_KEY: devops-lab
      SONAR_PROJECT_NAME: DevOps Lab Project
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: http://localhost:9000
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: true

      - uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://localhost:9000

      - name: Wait & check SonarQube quality gate
        run: |
          chmod +x scripts/check_sonar_quality_gate.sh
          ./scripts/check_sonar_quality_gate.sh devops-lab-1 180

  build-and-scan:
    name: Build & Scan Image
    runs-on: ubuntu-latest
    needs: sonar
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: true

      - name: Build Docker image
        run: |
          docker build -t test-app:latest .

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: test-app:latest
          format: 'table'
          output: 'trivy-results.txt'
          severity: 'CRITICAL,HIGH'

      - name: Display Trivy scan results
        if: always()
        run: |
          echo "üîç Security Scan Results for test-app:latest"
          echo "============================================="
          if [ -f trivy-results.txt ]; then
            cat trivy-results.txt
            
            # Count vulnerabilities
            CRITICAL=$(grep -c "CRITICAL" trivy-results.txt || echo "0")
            HIGH=$(grep -c "HIGH" trivy-results.txt || echo "0")
            
            echo ""
            echo "üìä Summary:"
            echo "  üî¥ Critical: $CRITICAL"
            echo "  üü† High: $HIGH"
            
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "‚ö†Ô∏è  Security vulnerabilities detected!"
              echo "üîß Consider updating base images or dependencies"
            else
              echo "‚úÖ No critical or high severity vulnerabilities found!"
            fi
          else
            echo "‚ùå Trivy scan results not found"
          fi